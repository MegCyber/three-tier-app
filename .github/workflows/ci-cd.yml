name: CI/CD Pipeline

on:
  push:
    branches:
      - main # This workflow runs when code is pushed to the 'main' branch

jobs:
  build-and-scan:
    runs-on: ubuntu-latest # Use a fresh Ubuntu runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Set up Java for SonarCloud Scanner
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # --- Single SonarCloud Scan for the entire project ---
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} # Will be https://sonarcloud.io

      # --- Backend (app) Service: Build and Push ---
      - name: Build Backend Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/three-tier-app-backend:latest ./application-code/app-tier

      - name: Push Backend Docker Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/three-tier-app-backend:latest

      # --- Frontend (web) Service: Build and Push ---
      - name: Build Frontend Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/three-tier-app-frontend:latest ./application-code/web-tier

      - name: Push Frontend Docker Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/three-tier-app-frontend:latest

      # --- Optional: Quality Gate Check (RECOMMENDED for CI) ---
      # This step will fail the workflow if the Quality Gate fails on SonarCloud.
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Check SonarCloud Quality Gate Status
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          # Define project key and branch for direct Quality Gate query
          PROJECT_KEY="MegCyber_three-tier-app" # Make sure this matches your project key
          BRANCH_NAME="main" # Or your target branch name if different

          # Poll for Quality Gate status by projectKey and branch
          STATUS="PENDING"
          MAX_RETRIES=20 # Set a maximum number of retries (e.g., 20 * 10s = 200s = 3 min 20 sec timeout)
          RETRY_COUNT=0

          while { [ "$STATUS" = "PENDING" ] || [ "$STATUS" = "IN_PROGRESS" ]; } && [ "$RETRY_COUNT" -lt "$MAX_RETRIES" ]; do
            echo "Polling SonarCloud Quality Gate status for project $PROJECT_KEY on branch $BRANCH_NAME... Current status: $STATUS (Retry: $((RETRY_COUNT+1))/$MAX_RETRIES)"
            sleep 10 # Wait 10 seconds before polling again

            # Query using projectKey and branch directly
            RESPONSE=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=$PROJECT_KEY&branch=$BRANCH_NAME")
            echo "SonarCloud API Response: $RESPONSE" # Print response for debugging

            # Extract status. Use '|| echo ""' to prevent errors if jq path isn't found or JSON is invalid.
            STATUS=$(echo "$RESPONSE" | jq -r '.projectStatus.status' || echo "") 

            # If status is unexpectedly empty or null, treat it as pending for more retries (up to MAX_RETRIES)
            if [ -z "$STATUS" ] && { [ "$STATUS" != "PENDING" ] && [ "$STATUS" != "IN_PROGRESS" ]; }; then
                echo "Warning: Quality Gate status is empty/null, but not PENDING/IN_PROGRESS. Treating as PENDING for more retries."
                STATUS="PENDING" 
            fi

            RETRY_COUNT=$((RETRY_COUNT+1))
          done

          # Check if polling timed out
          if [ "$RETRY_COUNT" -ge "$MAX_RETRIES" ] && { [ "$STATUS" = "PENDING" ] || [ "$STATUS" = "IN_PROGRESS" ]; }; then
              echo "Error: Quality Gate check timed out after $((MAX_RETRIES * 10)) seconds. Analysis still PENDING/IN_PROGRESS."
              exit 1
          fi

          echo "Final Quality Gate Status: $STATUS"

          if [ "$STATUS" != "OK" ]; then
            echo "Quality Gate failed! See SonarCloud for details."
            exit 1
          else
            echo "Quality Gate passed."
          fi